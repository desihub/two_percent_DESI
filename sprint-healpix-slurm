#!/usr/bin/env python

"""Wrapper script on sprint-healpix

nside area/deg2
2 859.436692696
4 214.859173174
8 53.7147932935
16 13.4286983234
32 3.35717458084
64 0.839293645211
128 0.209823411303
256 0.0524558528257
512 0.0131139632064

From Jaime: "It took 98 nodes, each node used 24 cores for 3 hours. That gives
us 7K core hours in total. In wall clock time, taking into account the queue
delays, it took ~24 hours to run. (edited)"

From Stephen: "The nested scheme is such that the super pixel for each pixel is
a bit shift of 2 bits, i.e. integer division by 4.  So going up 3 layers from 64
-> 32 -> 16 -> 8 is pixnum // (4**3)"

"""
from __future__ import print_function, division

import os
import argparse
import yaml

import numpy as np
import healpy as hp
from astropy.table import Table

from desimodel.footprint import tiles2pix, pix2tiles

from desispec.log import get_logger
log = get_logger()

def main():

    parser = argparse.ArgumentParser()
    parser.add_argument('--topdir', help='Top-level output directory.', type=str, default='./')
    parser.add_argument('--config', '-c', default='input.yaml')
    parser.add_argument('--seed', '-s', help='Top-level seed for random number generation', type=int, default=None)
    parser.add_argument('--nproc', type=int, help='number of concurrent processes to use', default=24)
    parser.add_argument('--nside-spectra', help='Resolution of the healpixels passed to targets_truth', type=int, default=64)
    parser.add_argument('--nside-output-dir', help='Resolution of the healpixels used to organize the output files', type=int, default=8)
    parser.add_argument('--nsuperpix-per-node', help='Number of nside-output-dir healpixels to process per NERSC node', type=int, default=4)
    args = parser.parse_args()

    rand = np.random.RandomState(args.seed)

    # Read the pointings in the 2% survey and assign healpixels.
    twopct = Table.read('twopct.ecsv', format='ascii.ecsv', guess=False)
    healpixels = tiles2pix(nside=args.nside_spectra, tiles=twopct)

    # Group the (smaller) healpixels into superpixels.  
    superfactor = np.int( np.log2(args.nside_spectra / args.nside_output_dir) ) # scale factor
    allsuperpix = healpixels // 4**superfactor

    _, indx = np.unique(allsuperpix, return_index=True)
    superpix = allsuperpix[np.sort(indx)]
    #superpix = np.unique(allsuperpix)
    nsuperpix = len(superpix)

    nnode = np.int( np.ceil(nsuperpix / args.nsuperpix_per_node) )
    superchunk = np.array_split(superpix, nnode)

    # Generate a corresponding grid of seeds.
    superseed = rand.randint(2**32, size=nsuperpix)
    superseedchunk = np.array_split(superseed, nnode)

    log.info('Processing spectra in healpixels with nside = {}.'.format(args.nside_spectra))
    log.info('Number of superpixels (output directories) = {} with nside = {}.'.format(nsuperpix, args.nside_output_dir))
    log.info('Number of nodes needed = {} with {} superpixels per node.'.format(nnode, args.nsuperpix_per_node))

    # For each superpixel, determine the ra,dec boundaries and the (unique) output
    # directory.
    for pix, seed in zip(superchunk, superseedchunk):

        slurmfile = os.path.join( args.topdir, 'slurm-{}-{}.sh'.format(args.nside_output_dir, '-'.join(pix.astype(str))) )
        log.info('Writing {}'.format(slurmfile))

        slurm = open(slurmfile, 'w')
        slurm.write('#!/bin/bash\n')
        slurm.write('#SBATCH -p debug\n')
        slurm.write('#SBATCH -N 1\n')
        slurm.write('#SBATCH -L SCRATCH,project\n')
        slurm.write('#SBATCH -t 00:30:00\n')
        slurm.write('\n')

        for thispix, thisseed in zip(pix, seed):
            prefix = '{}-{}'.format(args.nside_output_dir, thispix)
            output_dir = os.path.join(args.topdir, prefix)

            these = np.where(thispix == allsuperpix)[0]
            log.info('  Number of healpixels (nside = {}) = {} in superpixel {} (nside = {}) with total area = {:.3f} deg2.'.format(
                args.nside_spectra, len(these), thispix, args.nside_output_dir, 
                len(these) * hp.nside2pixarea(args.nside_spectra, degrees=True)))

            import pdb ; pdb.set_trace()
            
            slurm.write('time srun -N 1 -n 1 -c {} python sprint-healpix '.format(args.nproc))
            slurm.write('--config {} '.format(args.config))
            slurm.write('--nproc {} '.format(args.nproc))
            slurm.write('--output_dir {} '.format(output_dir))
            slurm.write('--seed {} '.format(thisseed))
            slurm.write('--nside {} '.format(args.nside_spectra))
            slurm.write('--healpixels {}\n'.format( ' '.join(healpixels[these].astype(str))))

            if False:
                import matplotlib.pyplot as plt
                plt.scatter(twopct['RA'], twopct['DEC'])
                tt = pix2tiles(args.nside_spectra, healpixels[these], tiles=twopct)
                plt.scatter(tt['RA'], tt['DEC'], alpha=0.5)
                plt.show()

        slurm.close()

if __name__ == '__main__':
    main()
    
